---
# tasks file for tomcat-ansible-role

- name: Setup server.xml
  template:
    src: "{{ tomcat_template_server }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/server.xml"
  notify: restart tomcat

- name: Set fact of user roles to be enabled
  set_fact:
    tomcat_user_roles: "{{ (tomcat_user_roles + item.roles.split(',')|list)|unique }}"
  with_items:
    - "{{ tomcat_users }}"

- name: Setup tomcat-users.xml
  template:
    src: "{{ tomcat_template_users }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/tomcat-users.xml"
  notify: restart tomcat

- name: Create symlink {{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }} to {{ tomcat_install_path }}/{{ tomcat_service_name }}
  file:
    src: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
    dest: "{{ tomcat_install_path }}/{{ tomcat_service_name }}"
    state: link

- name: Configure access to Manager app (from localhost only or from anywhere)
  template:
    src: "{{ tomcat_template_manager_context }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/webapps/manager/META-INF/context.xml"
  notify: restart tomcat

- name: Configure access to Host Manager (from localhost only or from anywhere)
  template:
    src: "{{ tomcat_template_host_manager_context }}"
    dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/webapps/host-manager/META-INF/context.xml"
  notify: restart tomcat

- name: Set production permissions
  include: set-production-permissions.yml
  when: >
    (tomcat_installed is changed or tomcat_permissions_ensure_on_every_run) and
    tomcat_permissions_production

- name: Set non production permissions
  include: set-non-production-permissions.yml
  when: >
    (tomcat_installed is changed or tomcat_permissions_ensure_on_every_run) and
    not tomcat_permissions_production

# Issue #6 - Role assumes services live in /usr/lib/systemd
# 0 = Exists, 1 = Does Not Exist
- name: 'test if /usr/lib/systemd/system/ directory exists'
  shell: 'test -d /usr/lib/systemd/system/; echo $?'
  register: svc_path_exists

- block:

    - name: Configure service file {{ tomcat_service_name }}.service
      template:
        src: tomcat.service.j2
        dest: /usr/lib/systemd/system/{{ tomcat_service_name }}.service
      notify: restart tomcat

    - name: Enable tomcat service on startup
      systemd:
        name: "{{ tomcat_service_name }}"
        enabled: "{% if tomcat_service_enabled_on_startup %}yes{% else %}no{% endif %}"
        daemon_reload: yes

  when: svc_path_exists.stdout == "0"
